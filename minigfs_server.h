/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_MINIGFS_SERVER_H_
#define JSONRPC_CPP_STUB_MINIGFS_SERVER_H_

#include <jsonrpccpp/server.h>

class minigfs_Server : public jsonrpc::AbstractServer<minigfs_Server>
{
    public:
        minigfs_Server(jsonrpc::AbstractServerConnector &conn, jsonrpc::serverVersion_t type = jsonrpc::JSONRPC_SERVER_V2) : jsonrpc::AbstractServer<minigfs_Server>(conn, type)
        {
            this->bindAndAddMethod(jsonrpc::Procedure("ObtainChunkURL", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "action",jsonrpc::JSON_STRING,"arguments",jsonrpc::JSON_STRING,"chunkindex",jsonrpc::JSON_STRING,"class_id",jsonrpc::JSON_STRING,"fhandle",jsonrpc::JSON_STRING,"filename",jsonrpc::JSON_STRING,"host_url",jsonrpc::JSON_STRING,"object_id",jsonrpc::JSON_STRING,"owner_vsID",jsonrpc::JSON_STRING, NULL), &minigfs_Server::ObtainChunkURLI);
            this->bindAndAddMethod(jsonrpc::Procedure("PushChunk2Replica", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "action",jsonrpc::JSON_STRING,"arguments",jsonrpc::JSON_STRING,"chunk",jsonrpc::JSON_STRING,"chunkindex",jsonrpc::JSON_STRING,"class_id",jsonrpc::JSON_STRING,"fhandle",jsonrpc::JSON_STRING,"filename",jsonrpc::JSON_STRING,"host_url",jsonrpc::JSON_STRING,"object_id",jsonrpc::JSON_STRING,"owner_vsID",jsonrpc::JSON_STRING, NULL), &minigfs_Server::PushChunk2ReplicaI);
            this->bindAndAddMethod(jsonrpc::Procedure("CommitAbort", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "action",jsonrpc::JSON_STRING,"arguments",jsonrpc::JSON_STRING,"chunkindex",jsonrpc::JSON_STRING,"class_id",jsonrpc::JSON_STRING,"commitorabort",jsonrpc::JSON_STRING,"fhandle",jsonrpc::JSON_STRING,"filename",jsonrpc::JSON_STRING,"host_url",jsonrpc::JSON_STRING,"object_id",jsonrpc::JSON_STRING,"owner_vsID",jsonrpc::JSON_STRING, NULL), &minigfs_Server::CommitAbortI);
            this->bindAndAddMethod(jsonrpc::Procedure("LookUp", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "action",jsonrpc::JSON_STRING,"arguments",jsonrpc::JSON_STRING,"class_id",jsonrpc::JSON_STRING,"fhandle",jsonrpc::JSON_STRING,"filename",jsonrpc::JSON_STRING,"host_url",jsonrpc::JSON_STRING,"object_id",jsonrpc::JSON_STRING,"owner_vsID",jsonrpc::JSON_STRING, NULL), &minigfs_Server::LookUpI);
            this->bindAndAddMethod(jsonrpc::Procedure("Create", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "action",jsonrpc::JSON_STRING,"arguments",jsonrpc::JSON_STRING,"class_id",jsonrpc::JSON_STRING,"created_class_id",jsonrpc::JSON_STRING,"fhandle",jsonrpc::JSON_STRING,"filename",jsonrpc::JSON_STRING,"host_url",jsonrpc::JSON_STRING,"object_id",jsonrpc::JSON_STRING,"owner_vsID",jsonrpc::JSON_STRING,"sattr",jsonrpc::JSON_STRING, NULL), &minigfs_Server::CreateI);
            this->bindAndAddMethod(jsonrpc::Procedure("dumpJ", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "action",jsonrpc::JSON_STRING,"arguments",jsonrpc::JSON_STRING,"class_id",jsonrpc::JSON_STRING,"host_url",jsonrpc::JSON_STRING,"object_id",jsonrpc::JSON_STRING,"owner_vsID",jsonrpc::JSON_STRING, NULL), &minigfs_Server::dumpJI);
        }

        inline virtual void ObtainChunkURLI(const Json::Value &request, Json::Value &response)
        {
            response = this->ObtainChunkURL(request["action"].asString(), request["arguments"].asString(), request["chunkindex"].asString(), request["class_id"].asString(), request["fhandle"].asString(), request["filename"].asString(), request["host_url"].asString(), request["object_id"].asString(), request["owner_vsID"].asString());
        }
        inline virtual void PushChunk2ReplicaI(const Json::Value &request, Json::Value &response)
        {
            response = this->PushChunk2Replica(request["action"].asString(), request["arguments"].asString(), request["chunk"].asString(), request["chunkindex"].asString(), request["class_id"].asString(), request["fhandle"].asString(), request["filename"].asString(), request["host_url"].asString(), request["object_id"].asString(), request["owner_vsID"].asString());
        }
        inline virtual void CommitAbortI(const Json::Value &request, Json::Value &response)
        {
            response = this->CommitAbort(request["action"].asString(), request["arguments"].asString(), request["chunkindex"].asString(), request["class_id"].asString(), request["commitorabort"].asString(), request["fhandle"].asString(), request["filename"].asString(), request["host_url"].asString(), request["object_id"].asString(), request["owner_vsID"].asString());
        }
        inline virtual void LookUpI(const Json::Value &request, Json::Value &response)
        {
            response = this->LookUp(request["action"].asString(), request["arguments"].asString(), request["class_id"].asString(), request["fhandle"].asString(), request["filename"].asString(), request["host_url"].asString(), request["object_id"].asString(), request["owner_vsID"].asString());
        }
        inline virtual void CreateI(const Json::Value &request, Json::Value &response)
        {
            response = this->Create(request["action"].asString(), request["arguments"].asString(), request["class_id"].asString(), request["created_class_id"].asString(), request["fhandle"].asString(), request["filename"].asString(), request["host_url"].asString(), request["object_id"].asString(), request["owner_vsID"].asString(), request["sattr"].asString());
        }
        inline virtual void dumpJI(const Json::Value &request, Json::Value &response)
        {
            response = this->dumpJ(request["action"].asString(), request["arguments"].asString(), request["class_id"].asString(), request["host_url"].asString(), request["object_id"].asString(), request["owner_vsID"].asString());
        }
        virtual Json::Value ObtainChunkURL(const std::string& action, const std::string& arguments, const std::string& chunkindex, const std::string& class_id, const std::string& fhandle, const std::string& filename, const std::string& host_url, const std::string& object_id, const std::string& owner_vsID) = 0;
        virtual Json::Value PushChunk2Replica(const std::string& action, const std::string& arguments, const std::string& chunk, const std::string& chunkindex, const std::string& class_id, const std::string& fhandle, const std::string& filename, const std::string& host_url, const std::string& object_id, const std::string& owner_vsID) = 0;
        virtual Json::Value CommitAbort(const std::string& action, const std::string& arguments, const std::string& chunkindex, const std::string& class_id, const std::string& commitorabort, const std::string& fhandle, const std::string& filename, const std::string& host_url, const std::string& object_id, const std::string& owner_vsID) = 0;
        virtual Json::Value LookUp(const std::string& action, const std::string& arguments, const std::string& class_id, const std::string& fhandle, const std::string& filename, const std::string& host_url, const std::string& object_id, const std::string& owner_vsID) = 0;
        virtual Json::Value Create(const std::string& action, const std::string& arguments, const std::string& class_id, const std::string& created_class_id, const std::string& fhandle, const std::string& filename, const std::string& host_url, const std::string& object_id, const std::string& owner_vsID, const std::string& sattr) = 0;
        virtual Json::Value dumpJ(const std::string& action, const std::string& arguments, const std::string& class_id, const std::string& host_url, const std::string& object_id, const std::string& owner_vsID) = 0;
};

#endif //JSONRPC_CPP_STUB_MINIGFS_SERVER_H_
